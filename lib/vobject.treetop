grammar VObjectGrammar
    rule vobject
        #BeginLine VersionLine Contentline+ EndLine
        BeginLine VersionLine rest
	{
		def content 
			comp = elements[0].content[:BEGIN].to_sym
	            	hash = { comp => [elements[1].content] + elements[2].content }
	            return hash
		end
	}
    end
    rule rest
	(EndLine / Contentline rest / BeginLine rest rest  ) 1..1
	{
		def content
			if elements[0].elements[0].text_value == 'END:'
				hash = []
			elsif elements[0].elements[0].content.has_key?(:BEGIN)
				hash = [ { elements[0].elements[0].content[:BEGIN] => elements[0].elements[1].content } ] + elements[0].elements[2].content
			else
				hash = [ elements[0].elements[0].content ]  + elements[0].elements[1].content
			end
			return hash
		end
	}
    end
    rule BeginLine
        'BEGIN:' IANAToken Crlf 
	{
		def content
			return { :BEGIN => elements[1].text_value.to_sym }
	        end
	}
    end
    rule VersionLine
        'VERSION:' Value Crlf
	{
		def content
			hash = { :VERSION => {} }
			hash[:VERSION][:value] = elements[1].text_value
			return hash
	        end
	}
    end
    rule EndLine
        'END:' IANAToken Crlf 
	{
		def content
			return { :END => elements[1].text_value.to_sym }
	        end
	}
    end
    rule Contentline
        #"#{LineGroup}(?<key>#{Name})(?<params>(#{Params})?):(?<value>#{Value})#{Crlf}"
        LineGroup? Name Params? ':' Value Crlf 
	{
		def content
			key =  elements[1].text_value.to_sym
			hash = { key => {} }
			hash[key][:value] = elements[4].text_value
			hash[key][:group] = elements[0].content  unless elements[0].text_value.empty?
			hash[key][:params] = elements[2].content unless elements[2].text_value.empty?
			return hash
		end
	}
    end
    rule IANAToken
	# XX
        #'[a-zA-Z\d\-]+?'r
        [a-zA-Z\d\-]+
	{
		def content
			return elements[0].text_value
		end
	}
    end
    rule LineGroup
        # ((?<group>#{Group})\.)?
        Group '.' 
	{
		def content
			return elements[0].text_value
		end
	}
    end
    rule PText
	# XX
        #SafeChar*?
        SafeChar*
    end
    rule QuotedString
	# XX
        #DQuote QSafeChar*? DQuote
        DQuote QSafeChar* DQuote
    end
    rule XName
        '[xX]-' IANAToken
    end
    rule Group
        IANAToken
    end
    rule Name 
        XName / (!beginend  IANAToken )
    end
    rule beginend
	    'BEGIN' / 'END'
    end
    rule ParamName
        XName / IANAToken
    end
    rule ParamValue
        PText / QuotedString
    end
    rule PValueList
        #(?<head>#{ParamValue})(?<tail>(,#{ParamValue})*)
        #ParamValue (',' ParamValue)*
        ( ParamValue / ParamValue ',' PValueList ) 1..1
	{
		def content
			ret =  elements[0].text_value.sub(Regexp.new("^\"(.+)\"$"), '\1').gsub(/\\n/, "\n")
			ret += "," + elements[2].content if elements[2]
			return ret
		end
	}
    end
    rule Pid
        '\d+(\.\d+)*'r
    end
    rule PidList
        #(?<head>#{Pid})(?<tail>(,#{Pid})*)#
        Pid (',' Pid)*
    end
    rule Param
        #(?<pname>#{ParamName})=(?<pvalue>#{PValueList})
        ParamName '=' PValueList
	{
		def content
			return {elements[0].text_value.to_sym => elements[2].content}
		end
	}
    end
    rule Params
        #(;(?<phead>#{Param}))(?<ptail>(;#{Param})*)
        #';' Param (';' Param)*
        ( ';' Param / ';' Param Params ) 1..1
	{
		def content
			ret = [ elements[0].elements[1].content]
			ret += elements[0].elements[2].content if elements[0].elements[2]
			return ret
		end
	}
    end
    rule Value
	# XX
        #ValueChar*?
        ValueChar*
    end


    rule Cr
        #"\u000d"
        "\x0d"
    end
    rule Lf
        #"\u000a"
        "\x0a"
    end
    rule Crlf
        Cr / Lf
    end
    rule Utf8_tail
        '[\u0080-\u00bf]'r
    end
    rule Utf8_2
        '[\u00c2-\u00df]'r  / Utf8_tail
    end        
    rule Utf8_3 
        '[\u00e0\u00a0-\u00bf\u00e1-\u00ec\u00ed\u0080-\u009f\u00ee-\u00ef]'r  / Utf8_tail
    end
    rule Utf8_4
        '[\u00f0\u0090-\u00bf\u00f1-\u00f3\u00f4\u0080-\u008f]'r / Utf8_tail
    end
    rule Wsp
        '[ \t]'r
    end
    rule VChar
        '[\u0021-\u007e]'r
    end
    rule NonASCII
        Utf8_2 / Utf8_3 / Utf8_4
    end
    rule QSafeChar
        Wsp / '[!\u0023-\u007e]'r / NonASCII
    end
    rule SafeChar
        Wsp / '[!\u0023-\u0039\u003c-\u007e]'r  / NonASCII
    end
    rule ValueChar
        Wsp / VChar / NonASCII
    end
    rule DQuote
        '"'
    end
end
      
